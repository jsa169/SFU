Question 1. Submitted through coursys

------------------------------------------------------------------------------------------

Question 2. Emulator, having an emulator allows users to run any software on any OS. For example, user can run a Playstation emulator on a computer to play Playstation games.

------------------------------------------------------------------------------------------

Question 3. 

%rdi is the first argument, i.e.,char *str;	"Reference letter"
%esi is the second argument, i.e.,int n;
%eax is the return value, an int

mystery:
	movl	$0, %eax 			//set return to 0
	leaq	(%rdi, %rsi), %rcx	//index in the string

loop:
	cmpq	%rdi, %rcx		//comparing 2-1 ? 0					64bits
	jle	endl				//Jump if less or equal (signed â‰¤)	
	decq	%rcx			//decrease by 1 					64bits
	cmpb	$0x65, (%rcx)	//comparing 2-1 ?0					8bit
	jne	loop				//Jump if not equal / not zero
	incl	%example		//incremental by 1					32bits
	jmp	loop				//Unconditional jump to loop

endl:
	ret


a)

		0		0
		1		0
		2		1
		3		1
		4		2
		5		2
		6		3
		7		3
		8		3
		9		4
		10		4
		11		4
		12		5
		13		5
		14		5
		15		6
		16		6
		17		6

b)
		The mystery function calculates the number of e's in the string "Reference letter", according to the indexes giving as n. For example:
			n=1 means we calculate how many e's are in "R", which is 0 
			n=5 means we calculate how many e's are in "Refer", which is 2
			n=11 means we calculate how many e's are in "Reference l", which is 4
			n = 17 means we calculate how many e's are in "Reference letter\r" which is 6

c)
		%rcx is the address of the index letter in the string, to keep track where are. For example, when n = 10, %rcx is the address of the 11th element in "Reference l", which is "l". As long as its not pointing to the first element, it gets decreased by one at the beginning of every loop, then the loop compares the value at %rcx with "e".

d)
		The main loop proresses backward, through str. At the beginning, the indexing element %rcx is set to the first element + the range we want to calculate e's. and through each loop, as long as %rcx != first element, we decrease %rcx by one and progress. As a result, we compare the elements in the string backwards.


