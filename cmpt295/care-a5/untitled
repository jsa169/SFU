	.globl sum_float

	# var map:
	#   %xmm0:  total
	#   %rdi:   F[n] (array pointer)
	#   %rsi:   n
	#   %rbp:   head pointer
	#	%rsp:	tail pointer
	#	%rdx:	loop counter
	#	%xmm1: 	x
	#	%xmm2:	y
	#	%xmm3:	temp 

sum_float:
	push	%rbp
	mov	%rsp, %r8			#saving original stack pointer

	movq $0x7f800000, %rcx
							#push infinity to Q
	push %rcx

	mov	%rsp, %rbp   			# Q <- empty
	addq $4, %rsp

	movq %rsi, %xmm0

	mov $1, %rdx				#counter = 1

	mov %rsi, %rax

loop:
	cmpq	%rsi, %rdx
	#cmp	$4, %rdx             
             
	jge	endloopplus                 # while (counter < n) {

	cmp $1, %rax
	je endloopplus

	xorps	%xmm0, %xmm0            # total <- 0.0

	movss	(%rdi), %xmm1		#x = max(head F, head Q)
	movss	(%rbp), %xmm3		
	minss	%xmm3, %xmm1
	comiss 	(%rdi), %xmm1 

	je dequeuex

	subq $4, %rbp				#dequeue Q
	jmp followx
dequeuex:
	addq $4, %rdi				#dequeue F
	dec %rax
followx:
	
	movss	(%rdi), %xmm2		#y = max(head F, head Q)
	movss	(%rbp), %xmm3
	minss	%xmm3, %xmm2
	comiss 	(%rdi), %xmm2 

	je dequeuey

	subq $4, %rbp				#dequeue Q
	jmp followy
dequeuey:
	addq $4, %rdi				#dequeue F
	dec %rax

followy:

	addss	%xmm1, %xmm0
	addss	%xmm2, %xmm0

	movq	%xmm0, %r9

	push	%r9
	push	%rcx
	addq $4, %rsp

	inc	%rdx					#loop counter ++
	jmp	loop                    # }

endloopplus:
	xorps	%xmm0, %xmm0            # total <- 0.0

	cmp $0, %rax
	je endloop

	addss (%rdi), %xmm0

endloop:
	cmp %rbp, %rsp
	jg end

	addss (%rbp), %xmm0
	sub $4, %rbp
	jmp endloop

end:
	mov 	%r8, %rsp
	pop		%rbp
	ret


	# var map:
	#   %xmm0:  total
	#   %rdi:   F[n] (base pointer)
	#   %rsi:   n
	#   %rbp:   endptr

#sum_float:
#	push	%rbp

#	xorps	%xmm0, %xmm0            # total <- 0.0
#	leaq	(%rdi, %rsi, 4), %rbp   # endptr <- F + n

#loop:
#	cmpq	%rdi, %rbp             
#	jle	endloop                 # while (F < endptr) {
#	addss	(%rdi), %xmm0           #    total += F[0]
#	add	$4, %rdi                #    F++
#	jmp	loop                    # }

#endloop:
#	pop	%rbp
#	ret

